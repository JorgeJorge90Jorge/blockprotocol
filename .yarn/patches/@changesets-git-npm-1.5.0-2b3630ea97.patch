diff --git a/dist/git.cjs.dev.js b/dist/git.cjs.dev.js
index 40cfe7b25d85c2adcfc6d5f984c05cdbbc3ccccd..cce4c290df751ec5c09e6227e3f6cc480d041148 100644
--- a/dist/git.cjs.dev.js
+++ b/dist/git.cjs.dev.js
@@ -247,6 +247,10 @@ async function getChangedPackagesSinceRef({
     const prevPkg = fileToPackage[fileName] || {
       dir: ""
     };
+
+    // Fixing "Some packages have been changed but no changesets were found" for private packages
+    if (pkg.packageJson.private) return;
+
     if (pkg.dir.length > prevPkg.dir.length) fileToPackage[fileName] = pkg;
   }));
   return Object.values(fileToPackage) // filter, so that we have only unique packages
diff --git a/dist/git.cjs.prod.js b/dist/git.cjs.prod.js
index 711c0cbc97d8b5a2a77f0f8f773e4eab490368ca..f7756dbf68968f26e2b78d526644001de64303c6 100644
--- a/dist/git.cjs.prod.js
+++ b/dist/git.cjs.prod.js
@@ -139,6 +139,7 @@ async function getChangedChangesetFilesSinceRef({cwd: cwd, ref: ref}) {
 }
 
 async function getChangedPackagesSinceRef({cwd: cwd, ref: ref}) {
+  
   const changedFiles = await getChangedFilesSince({
     ref: ref,
     cwd: cwd,
@@ -151,6 +152,10 @@ async function getChangedPackagesSinceRef({cwd: cwd, ref: ref}) {
       const prevPkg = fileToPackage[fileName] || {
         dir: ""
       };
+
+    // Fixing "Some packages have been changed but no changesets were found" for private packages
+    if (pkg.packageJson.private) return;
+
       pkg.dir.length > prevPkg.dir.length && (fileToPackage[fileName] = pkg);
     }));
     var dir;
diff --git a/dist/git.esm.js b/dist/git.esm.js
index 0cc847fb506155b247e7f9ea91900971cef48546..451ebbc507a3c7d0cac469c014b52f48021ef7a8 100644
--- a/dist/git.esm.js
+++ b/dist/git.esm.js
@@ -236,6 +236,10 @@ async function getChangedPackagesSinceRef({
     const prevPkg = fileToPackage[fileName] || {
       dir: ""
     };
+
+    // Fixing "Some packages have been changed but no changesets were found" for private packages
+    if (pkg.packageJson.private) return;
+
     if (pkg.dir.length > prevPkg.dir.length) fileToPackage[fileName] = pkg;
   }));
   return Object.values(fileToPackage) // filter, so that we have only unique packages
